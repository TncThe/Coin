{"version":3,"file":"highlight.service.d.ts","sources":["highlight.service.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HighlightConfig, HighlightResult, HighlightOptions } from './highlight.model';\r\nexport declare class HighlightJS {\r\n    constructor(options: HighlightOptions);\r\n    /**\r\n     * Core highlighting function.\r\n     * @param name Accepts a language name, or an alias\r\n     * @param value A string with the code to highlight.\r\n     * @param ignore_illegals When present and evaluates to a true value, forces highlighting to finish\r\n     * even in case of detecting illegal syntax for the language instead of throwing an exception.\r\n     * @param continuation An optional mode stack representing unfinished parsing.\r\n     * When present, the function will restart parsing from this state instead of initializing a new one\r\n     */\r\n    highlight(name: string, value: string, ignore_illegals: boolean, continuation?: any): HighlightResult;\r\n    /**\r\n     * Highlighting with language detection.\r\n     * @param value Accepts a string with the code to highlight\r\n     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.\r\n     * The subset can also be set with configure, but the local parameter overrides the option if set.\r\n     */\r\n    highlightAuto(value: string, languageSubset: string[]): HighlightResult;\r\n    /**\r\n     * Post-processing of the highlighted markup.\r\n     * Currently consists of replacing indentation TAB characters and using <br> tags instead of new-line characters.\r\n     * Options are set globally with configure.\r\n     * @param value Accepts a string with the highlighted markup\r\n     */\r\n    fixMarkup(value: string): string;\r\n    /**\r\n     * Applies highlighting to a DOM node containing code.\r\n     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node.\r\n     * See the class reference for all available language names and aliases.\r\n     * @param block The element to apply highlight on.\r\n     */\r\n    highlightBlock(block: HTMLElement): void;\r\n    /**\r\n     * Configures global options:\r\n     * @param config\r\n     */\r\n    configure(config: HighlightConfig): void;\r\n    /**\r\n     * Applies highlighting to all <pre><code>..</code></pre> blocks on a page.\r\n     */\r\n    initHighlighting(): void;\r\n    /**\r\n     * Adds new language to the library under the specified name. Used mostly internally.\r\n     * @param name A string with the name of the language being registered\r\n     * @param language A function that returns an object which represents the language definition.\r\n     * The function is passed the hljs object to be able to use common regular expressions defined within it.\r\n     */\r\n    registerLanguage(name: string, language: Function): void;\r\n    /**\r\n     * @return The languages names list.\r\n     */\r\n    listLanguages(): string[];\r\n    /**\r\n     * Looks up a language by name or alias.\r\n     * @param name Language name\r\n     * @return The language object if found, undefined otherwise.\r\n     */\r\n    getLanguage(name: string): any;\r\n}\r\n"]}